# Book - ECAI 2006: 17th European Conference on Artificial Intelligence
	Pessimistic Heuristics Beat Optimistic Ones in Real-Time Search - Page - 149 - https://books.google.com.co/books?id=qNTvAgAAQBAJ&pg=PA148
		Se conoce que la distribución para la heuristica de distancia manhattan es la heuristica optima para el dominio del 8 puzzle
	

# Article - Complete Solution of the Eight-Puzzle and the Benefit of Node Ordering in IDA* - https://www.ijcai.org/Proceedings/93-1/Papers/035.pdf - Reinfeld, A: Complete solution of the Eight-Puzzle and the benefit of node-ordering in IDA*. In: Procs. Int. Join Conf. on AI, Chambéry. Savoi, France. pp. 248-253 (1993)
	Page - 2
		En el 8 puzzle existe 9! permutaciones posibles para un tablero de 3x3, y cada segunda permutación es solucionable [Johnson and Storey, 1879], por ende hay un total de 9!/2 = 181440 instancias solucionables
	
	page - 2
		las celdas con un orden casi inversamente ordenados, su solución resulta ser de largos caminos, con muchas transpociones de movimiento
		
		Con la información de este articulo de un tablero de allí se prueba el programa
	
		int[][] tiles= {{ 8, 5, 6 }, { 7, 2, 3 }, { 4, 1, 9 }};//9 is empty cell;
		public int[][] goalState = {{ 9, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 }};//state when end algoritm
		Start Search
		veces expandido 116421
		Actions (literal values) [Arriba, Arriba, Izquierda, Izquierda, Abajo, Derecha, Arriba, Izquierda, Abajo, Abajo, Derecha, Arriba, Derecha, Abajo, Izquierda, Arriba, Arriba, Izquierda, Abajo, Abajo, Derecha, Arriba, Derecha, Arriba, Izquierda, Izquierda, Abajo, Derecha, Arriba, Izquierda]
		Num actions 30
		end Search
		
		se obtiene la misma cantidad de acciones que indica el articulo para el tablero dado, es decir el resultado es el mismo, obviamente computo varia
		
# Article - A Puzzle to Challenge Genetic Programming - https://books.google.com.co/books?id=xzhuCQAAQBAJ&pg=PA238
	codigo Hamming  es usado para la detección y correción en la teoria de codificación [R.W. Hamming. Coding and Information Theory. Prentice-Hall, Inc, New Jersey, USA, 1980.]... Nota: cada error en la palabra es una distancia de hamming 1 ya que está fuera del codigo de la palabra, esto indica que 1 bit en el vector necesita ser cambiado para obtener el codigo de correcto.
	
# Article - PATTERN DATABASES - http://onlinelibrary.wiley.com/doi/10.1111/0824-7935.00065/abstract
	la distancia manhattan maxima en e 8 puzzle es de 31... con una solución tribial del 8 puzzle y cualquier instancia del 15 puzzle que se pueda resolver con una pequeña busqueda; el estado del 8 puzzle es un subpuzzle que funciona como estado temporal para llegar a parte de la solución del 15-puzzle

# Book - Beginning Robotics Programming in Java with LEGO Mindstorms - https://books.google.com.co/books?id=ecSADQAAQBAJ&printsec=frontcover - https://link.springer.com/content/pdf/10.1007%2F978-1-4842-2005-4.pdf
	Introducción de leJOS, es un sistema operativo de java, el cual es un lenguaje de codigo abierto creado para el desarrollo de software para los productos de Lego Mindstroms con java. Está tambien la guia de instalación del plugin, programa leJOS y JDK. Información sobre el A* busquedas iformadas y codigos de ejemplo de LeJos...
	
	Chapter 11 - page 194: El sensor de luz capta la intensidad de luz capturada por los lentes y este ejecuta ciertas funcionalidades, desde el punto de la luz emitida por el sensor hacia abajo, el robot podria seguir una linea negra o alguna linea de cualquier color (Detección de presencia de objetos)...
	
	Page 195: El sensor de color puede ser usado par ala detección de diferentes colores, el sensor emite una luz roja, azul o verde de sus led's multicolor que están en el sensor. Con la implementación de ColorDetector interface (Codigo), el sensor de color puede leer e identificar el color que se encuentra allí sea con funciones que tienen valores por defecto de lo que es un color o un estimado del mismo o ver su valor RGB (sensing color) con el siguiente codigo tnato NXT como EV3.
	
	/**
	* Demonstrate color sensing
	*
	* @throws UnsupportedSensorException
	* Thrown if _colorPort does not specify a valid
	* color sending
	* port
	*/
	private static void runColorSenseDemo() throws UnsupportedSensorException {
		LCD. drawString("Press to begin…", 0, 0);
		Button. waitForPress();
		SensorControlsControl = new SensorControl ( null, null, _colorPort, null);
		while (!Button. ESCAPE.isPressed()) {
			ColorStructcvalue = sControl.getSensedColor();
			Color cv = sControl.getRGBColor();
			LCD. clear();
			LCD. drawString("Color: " + cvalue, 0, 0);
			LCD. drawString("Sensed:", 0, 1);
			LCD. drawString(
			cv.getRed() + " " + cv.getGreen() + " " +
			cv.getBlue(), 0,2);
		}
	} 
	y ejemplos e ideas sobre como programar y usar el sensor de color...
# Book - Artificial Intelligence: A Systems Approach: A Systems Approach - https://books.google.com.co/books?id=ekUHwvRP7nUC&pg=PA15
	Busquedas informadas, son una evolución de las busquedas en las cuales se aplica algoritmos de busquedas con heuristicas, de esta manera dando un espacio filtrado de la busqueda, haciendo de este modo el algoritmo mas eficiente uno de ellos es A*.
	busqueda A*, hace una busqueda en la cual en su espacio de busqueda evalua una función heuristica, este algoritmo usa tanto el costo dado requerido para ir desde el estado inicial hasta el estado que se está evaluando sumado con el valor de la función heuristica del nodo que se evalua. 

# Book - Artificial Intelligence By Neeta Deshpande, Nanda Yadav - https://books.google.com.co/books?id=8meHRbczo4cC&pg=SA2-PA1
	algoritmo A*: De un problema solucionable, se representa en un estado inicial con condiciones apropiadas y teniendo presente el estado solución. por cada acción realizada se genera los estados sucesores con los efectos de tal acción, este continua hasta que este genere el sucesor del estado solución. El A* hace este proceso de generar estados sucedores de cierta manera, siempre y cuando se este observando el sigueinte estado del procedimiento, A* da uso de una función heuristica la cual trata de escojer el mejor estado en el proceso de busqueda. Si la heuristica es buena  es buena no solo se encontrará rapido una solución si no que la solución será la mejor posible.
	
	1. El algoritmo posee 2 conjuntos:
		* OPEN: son la lista de nodos que requieren ser examinados
		* CLOSE: son la lista de nodos que ya han sido examinados
	2. inicialmente los OPEN continen el estado inicial y los cerrados son vacios, cada n nodo contiene lo siguiente
		* g(n): costo  para llegar desde el estado inicial hasta ese nodo n
		* h(n): valor de heuristica del nodo respecto al nodo solución
		* f(n) costo estimado de la mejor solución mediante el nodo n
	3. Cada nodo contiene una referencia del padre, para asi si la mejor solución es encontrada pueda ser tomada. El ciclo principal del A* se repetirá en cada nodo, tomando n nodo con el valor f(n) menor de los nodos OPEN , si n es el estado solución termina el algoritmo y la solución es dada por backtracking desde n. De no ser el estado solución el nodo n es removido de OPEN y es agregado a CLOSE, seguido a esto se generarán todos los posibles nodos sucesores de n (expandir)
	4. Por cada node sucesor de n si ya se encuentra CLOSE si la copia (de los expandidos) es de igual o menor valor f(n) estimado, este se puede descartar para nuevamente generar n y sobre-escribirlo. De forma similar si n ya existe en OPEN y la copia (de los expandidos) es igual o de menor valor f(n) a este se puede descartar y generar nuevamente a n para sobre-escribirlo
	
# Book Desarrollo de Videojuegos: Desarrollo de Componentes - https://books.google.com.co/books?id=u2DABAAAQBAJ&pg=PA59
	Page 58 - 8 puzzle: El 8 puzzle es un problema donde se tienen 8 piezas numeradas del 1 al 8 y un espacio sin pieza. Las piezas se pueden deslizar al espacio en blanco y asi cambiar la configuración del puzzle....  Si consideramos que de los cuatro movimientos posibles el costo de los movimientos hacia arriba e izquierda van a costar 2 unidades frente a la unidad de los movimientos abajo y derecha
	
# revista de ingenieria, Volumenes 63-64 - https://books.google.com.co/books?id=tWknAQAAMAAJ&dq=heuristica+para+8+puzzle&focus=searchwithinvolume&q=heuristica

	Heuristica:	Para resolver problemas los que han adquirido experiencia han acumulado técnicas que les funcionan en diversos casos. A esstas técnicas generales se les llama heuristicas, estas tecnicas no ganrantizan que de un determinado problema quede resuelto al aplicarlo

# EXACTLY HOW GOOD ARE HEURISTICS?: TOWARD A REALISTIC
PREDICTIVE THEORY OF BEST-FIRST SEARCH - http://ai2-s2-pdfs.s3.amazonaws.com/447c/71af3c3b4f9cbfe7abe051e76297d37d2892.pdf

	Cost, Quality and Error for 8-puzzle Heuristics: la busqueda con heuristica se supone que es mejor que busqueda en amplitud, pero ¿Cual es mejor? hace las heuristicas un salto exponencial mejor que la vusqueda en amplitud? se logra ver el número de nodos expandidos con según la profundidad requerida para alcanzar el estado solución en la Figura 1... se logra apreciar que todas las heuristicas del documento son mas optimas que la busqueda en amplitud sea con las siguientes heuristicas
	Kj/K1 el número de casillas que ocupa un tablero en una posición diferente al nodo solución (codigo hamming)
	K2 la suma de las 8 casillas del minimo de movimiento requeridos para llegar a la posición requerida, sin tener presente las casillas que le bloqueen (distancia manhattan)
	K3 es K2 + 3*seq(s) donde seq(s) cuenta 0 si no hay casilla en el centro (vacio en el centro) [verificar que es s y que heuristica relaciona seq], y por valor s será rotación hacia arriba sobre el perimetro del tablero, cada casilla que no esté en la casilla solución contará 2. (distancia manhattan + 3*seq)

# Information-Processing theory of Human Problem Solving - https://books.google.es/books?hl=es&lr=&id=GpTcAwAAQBAJ&oi=fnd&pg=PA271&dq=Information-Processing+theory+of+Human+Problem+Solving&ots=6FDRqbDct4&sig=ESSHcz6-0Y9e-LQhtLFqpvEB_to#v=onepage&q=Information-Processing%20theory%20of%20Human%20Problem%20Solving&f=false
	Teoria general de resolución de problemas para el humano: La resolución de problemas es casi omnipresente en la actividad humana, la complejidad para cualquiera toma horas de nuestra vida si no lo hemos intentado en algun momento de nuestra vida. el dominio de estos problemas son de rangos altamente estructurados, asi tareas tipo puzzle normalmente se presentan en diferentes temas psicologicos del laboratorio Difuzo, se encontrará estructurado con diferentes situaciones de gran magnitud de la vida real.
	Resolver varios problems requiere unicamente la información dque se encuentra en un problema explicito, con caracteristicas similares de los puzzles. Resolviendo otros problemas requiere elaborar y almacenar una gran cantidad de información en memoria o de manera externa con otros recusursos...
	
	el problema tipo puzzle que fue estudiado frecuentemente fue el problema de los misioneros y los canibales... (usado como ejemplo de ese tipo de problemas) otro es las torres de hannoi, en esos un problema basico el espacio requerido no es inmenso, aqui es donde la información dada por la persona es procesado y captable por el sistema o soportable a pequeños errores literales requiere encontrar soluciones...
	
	Solucionar de manera efectiva se obtiene de una extracción de información de la estructura de las tareas del entorno y usar información bien selectiva por las busquedas heuriscas para soluciones
	
	(entidase puzzle a problema tipo rompecabezas)

# About LEGO EV3 - https://books.google.com.co/books?id=HbEdAgAAQBAJ&printsec=frontcover
	La construcción sin clavar, sin empatar, sin clavos (lo que sobre sale de las piezas LEGO standar)[evolución LEGO]: Como todos saben, estos no son piezas clasicas de LEGO que están en el paquete EV3, y las piezas no tienen ningún clavo o forma de empatar, entonces ¿Como conectamos esto?
	
	para el 2000, LEGO su técnica se ha compuesto principalmente de partes sin empates/clavos. La antigua y buena técnica de bordes finos/afilados con empates/clavos fueron reemplzados de a poco por algo mas liso/suave, la técnologia de piezas sin clavos/empates/taches, se adquieren piezas que se ven más elegantes...
	
	En un principio estas piezas sin clavos/empates parecia que con ellas no se podia alguna cosa sencilla, pero al dar uso de esta manera diferente de construir  se producian modelos livianos, solidos, bonitos...
	
	estas piezas clasicas tienen un número par de clavos/empates y un número impar de huecos (por ejemplo una pieza con 2 clavos/empates tiene 1 hueco, una pieza con 6 clavos/empates tiene 5 huecos), y su nombre y medida dado por su conteo de clavos/empates. Las piezas sin clavos / empates son una versión minimizada de las que tienen clavos/empates; la unión entre piezas sin clavos/empates es con otras piezas externas que cumplen esta función...
	
	Las piezas ev3 ocupan mucho menos espacio que las piezas del LEGO clasico, estas piezas ev3 cada una posee un nombre, y podrian categorizarse en:
		* beams: vigas rectas, vigas angulo recto, vigas de angulo obtuso
		* connectos: los conectores, pines, agarradera, bloques cruzados
		* gears: engranaje de soporte, engranaje angular, engranaje de arrastre
		* wheels and treads: Ruedas, bandas de rodamiento / orugas, llanta
		* decorative pieces: paneles, dientes, espadas entre otras
		* miscellanous pieces: pelotas, pelotas de la revista, pelota de disparo, banda de goma
		* electronic pieces: ev3 brick, motores, sensores, cableado
	
	estas categorias son dadas por el autor del libro para tener facilidad de recordarlas.
	
# LEGO® MINDSTORMS EV3 and LEGO® Engineering Conference -https://community.education.lego.com/legodev/attachments/legodev/LE_LessonPlanLibrary_TKB/17/1/LEGO%20EV3%20lo-res.pdf
	Información sobre robot arm H25 del paquete education
	
# RGB Calibration for Color Image Analysis in Machine Vision - http://ieeexplore.ieee.org/abstract/document/536890/
	A model of RGB Errors: El espectro reflectante de un objeto, es la atenuación espectral de la luz reflectada del objeto donde un lente filtra el color; se tiene presente un valor de transmitancia espectral del filtro de color y una sensibilidad espectral de imagen (al objeto) del sensor, ademas de corrección gamma, intercepto relativo a lo oscuro actual...
	
	Los valores de RGB que se pueden obtener de una imagen / objeto se pueden obtener varios errores por componentes del sistema (medio, ambiente), los errores de RGB pueden provenir de varias partes, por ejemplo:
	* Cambio en la intensidad de la luz
	* Cambio en la temperatura luminica
	* oscuridad actual debido al gasto termico (sobrecalentamiento) del sensor
	* variación en la transmitancia espectral de los filtros de color en el tiempo...
	
Where the Really Hard Problems Are - http://www.dcs.gla.ac.uk/~pat/cpM/papers/cheeseman91where.pdf	

	Page 2 - En la importancia de Las transiciones de fase o secuencias de solución para inteligencia aritificial se cree que los sistemas complejos estan compuestos por varios valores interactivos que se pueden entender de manera frecuente en un nivel macroscopico, en terminos de ordenar pocos parametos que caracterizan a todo el sistema. Las propiedades de un sistema complejo se pueden encontrar como una serie de parametros de una rutina con estadisticas mecanizadas. Esto es posible debiado a un gran numero de interacticiones locales que pueden producir un comportamiento dramaticamente cordinado a nivel macroscopico, asi como las transiciones de fase, lo cual esto no depende de interacciones detalladas con el sistema. Algunos ejemplos de esto en Inteligencia artificial son.
	
		* Hamilton Circuits 
		* Graph Coloring 
		* K-Satisfyability 
	
Referencias pendientes:

https://books.google.com.co/books?id=H5j0L9rdLXIC&q=8+puzzle&dq=8+puzzle&hl=es-419&sa=X&redir_esc=y
http://www.aaai.org/Papers/AAAI/2008/AAAI08-056.pdf
https://books.google.es/books?hl=es&lr=&id=paIQAwAAQBAJ&oi=fnd&pg=PR18&dq=45544+robotarmh25&ots=HRrn962uxC&sig=ImJbii9MF2Ug7fut-NFUp2H8Y9Y#v=onepage&q=robot%20arm&f=false

Test -
	estados
	int[][] tiles= {{ 8, 5, 6 }, { 7, 2, 3 }, { 4, 1, 9 }};//9 is empty cell;
	public int[][] goalState = {{ 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }};//state when end algoritm
	
	Con manhattan
	Start Search
	veces expandido 11302
	Actions (literal values) [Arriba, Arriba, Izquierda, Abajo, Abajo, Derecha, Arriba, Arriba, Izquierda, Abajo, Abajo, Derecha, Arriba, Izquierda, Izquierda, Arriba, Derecha, Derecha, Abajo, Abajo, Izquierda, Arriba, Izquierda, Abajo, Derecha, Arriba, Derecha, Abajo]
	Num actions 28
	end Search

	Con hamming
	Start Search
	veces expandido 73101
	Actions (literal values) [Arriba, Arriba, Izquierda, Abajo, Abajo, Izquierda, Arriba, Derecha, Abajo, Derecha, Arriba, Arriba, Izquierda, Izquierda, Abajo, Derecha, Abajo, Derecha, Arriba, Izquierda, Arriba, Derecha, Abajo, Abajo, Izquierda, Arriba, Derecha, Abajo]
	Num actions 28
	end Search